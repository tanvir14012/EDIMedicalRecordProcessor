// <auto-generated />
using System;
using MedicalRecordProcessor.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalRecordProcessor.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230108050749_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedicalRecordProcessor.Models.MedicalReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FilePath")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UploadStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MedicalReports");
                });

            modelBuilder.Entity("MedicalRecordProcessor.Models.ReportDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ContractId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("MedicalReportId")
                        .HasColumnType("int");

                    b.Property<string>("RecordId")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Status")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalReportId");

                    b.HasIndex("ContractId", "RecordId");

                    b.ToTable("ReportDetails");
                });

            modelBuilder.Entity("MedicalRecordProcessor.Models.ReportDetailsError", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("ReportDetailsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReportDetailsId");

                    b.ToTable("ReportDetailsErrors");
                });

            modelBuilder.Entity("MedicalRecordProcessor.Models.ReportDetails", b =>
                {
                    b.HasOne("MedicalRecordProcessor.Models.MedicalReport", "MedicalReport")
                        .WithMany("ReportDetails")
                        .HasForeignKey("MedicalReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportDetails_MedicalReportId");

                    b.Navigation("MedicalReport");
                });

            modelBuilder.Entity("MedicalRecordProcessor.Models.ReportDetailsError", b =>
                {
                    b.HasOne("MedicalRecordProcessor.Models.ReportDetails", "ReportDetails")
                        .WithMany("ReportDetailsErrors")
                        .HasForeignKey("ReportDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportDetailsError_ReportDetailsId");

                    b.Navigation("ReportDetails");
                });

            modelBuilder.Entity("MedicalRecordProcessor.Models.MedicalReport", b =>
                {
                    b.Navigation("ReportDetails");
                });

            modelBuilder.Entity("MedicalRecordProcessor.Models.ReportDetails", b =>
                {
                    b.Navigation("ReportDetailsErrors");
                });
#pragma warning restore 612, 618
        }
    }
}
